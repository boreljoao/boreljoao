document.addEventListener('DOMContentLoaded', () => {
    // Remover loader quando a página carregar
    window.addEventListener('load', () => {
        const loader = document.querySelector('.loader');
        if (loader) {
            loader.style.opacity = '0';
            loader.style.visibility = 'hidden';
            
            // Iniciar animações após o loader
            setTimeout(initAnimations, 300);
        }
    });

    // Cursor personalizado
    const cursor = document.querySelector('.cursor');
    const cursorFollower = document.querySelector('.cursor-follower');
    
    if (cursor && cursorFollower) {
        document.addEventListener('mousemove', (e) => {
            cursor.style.left = e.clientX + 'px';
            cursor.style.top = e.clientY + 'px';
            
            setTimeout(() => {
                cursorFollower.style.left = e.clientX + 'px';
                cursorFollower.style.top = e.clientY + 'px';
            }, 100);
        });
        
        // Efeito em links e elementos interativos
        const interactiveElements = document.querySelectorAll('a, button, .service-card, .skill-item');
        
        interactiveElements.forEach(el => {
            el.addEventListener('mouseenter', () => {
                cursor.style.transform = 'translate(-50%, -50%) scale(1.5)';
                cursor.style.opacity = '0.5';
                cursorFollower.style.transform = 'translate(-50%, -50%) scale(1.5)';
            });
            
            el.addEventListener('mouseleave', () => {
                cursor.style.transform = 'translate(-50%, -50%) scale(1)';
                cursor.style.opacity = '1';
                cursorFollower.style.transform = 'translate(-50%, -50%) scale(1)';
            });
        });
    }

    // Scroll suave para links internos
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop - 100,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Animação ao rolar a página
    function initAnimations() {
        const animateOnScroll = () => {
            const elements = document.querySelectorAll('.service-card, .skill-item, .section-header');
            
            elements.forEach(element => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.2;
                
                if (elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };
        
        // Configurar observadores de elementos
        const observerOptions = {
            threshold: 0.1
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);
        
        document.querySelectorAll('.service-card, .skill-item, .section-header').forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(30px)';
            item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(item);
        });
        
        // Ativar na carga inicial
        animateOnScroll();
        window.addEventListener('scroll', animateOnScroll);
        
        // Atualizar ano do copyright
        document.getElementById('current-year').textContent = new Date().getFullYear();
    }

    // Efeito parallax para a imagem do hero
    const heroImage = document.querySelector('.image-wrapper');
    if (heroImage) {
        window.addEventListener('scroll', () => {
            const scrollValue = window.scrollY;
            heroImage.style.transform = `scale(${1 - scrollValue * 0.0005})`;
        });
    }
});


//cube
const cube = document.getElementById('cube');

/* rotação acumulada */
let rotX = 0, rotY = 0;

/* velocidade base — nunca zera */
let baseVelX = 0.3;
let baseVelY = 0.15;

/* impulso extra dado pelo usuário */
let extraVelX = 0;
let extraVelY = 0;

/* arraste */
let dragging = false;
let lastX = 0, lastY = 0;

/* parâmetros */
const mouseFactor = 0.14;  // sensibilidade
const friction    = 0.96;  // desaceleração da inércia

function rotateCube() {
  cube.style.transform = `rotateX(${rotY}deg) rotateY(${rotX}deg)`;
}

function animate() {
  /* aplica velocidades */
  if (!dragging) {
    rotX += baseVelX + extraVelX;
    rotY += baseVelY + extraVelY;

    /* fricção só na parte extra */
    extraVelX *= friction;
    extraVelY *= friction;
  }

  rotateCube();
  requestAnimationFrame(animate);
}
animate();

/* ========== mouse / pointer ========== */
cube.addEventListener('mousedown', e => {
  dragging = true;
  lastX = e.clientX;
  lastY = e.clientY;
  cube.style.cursor = 'grabbing';

  // pausa o giro base ao segurar
  baseVelX = 0;
  baseVelY = 0;
});

window.addEventListener('mousemove', e => {
  if (!dragging) return;
  const dx = e.clientX - lastX;
  const dy = e.clientY - lastY;
  lastX = e.clientX;
  lastY = e.clientY;

  /* rotaciona em tempo real */
  rotX += dx * mouseFactor;
  rotY -= dy * mouseFactor;
  rotateCube();

  /* esses deltas viram velocidade extra */
  extraVelX = dx * mouseFactor;
  extraVelY = -dy * mouseFactor;
});

window.addEventListener('mouseup', () => {
  dragging = false;
  cube.style.cursor = 'grab';

  // retoma o giro base após soltar
  baseVelX = 0.3;
  baseVelY = 0.15;
});
